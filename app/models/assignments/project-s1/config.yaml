---
title: Class Project
subtitle: Sprint-1
issued_with: collaboration-and-version-control
due_with: software-requirements
goal: >
  In this assignment you will write HTML and CSS. We 
  do not expect you to be able to write a website from
  scratch afterward. Instead, you should be able to 
  look at the a piece of HTML or CSS and understand
  roughly what it does.
videos:
  - title: Getting started with Dash
    description: >
      This screencast shows how to sign up for Dash
      and get started on the first project.
    time: 2:54m
    youtube_key: og1ps_NFR3A
  - title: Getting started with Dash
    description: >
      This screencast shows how to sign up for Dash
      and get started on the first project.
    time: 2:54m
    youtube_key: og1ps_NFR3A

---

### Background

The semester project is to write an application allows users to create
and RSVP for upcoming events: essentially a minimal clone of Eventbrite.
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit
in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
officia deserunt mollit anim id est laborum.

### Project description

Code description

```
.
├── README.md     # A markdown file describing how to run the project code
│
├── package.json  # NPM configuration file that enumerates the dependencies
│                 # of the app: links to code other people have written.
│
├── Gulpfile.js   # Configuration file for Gulp, which you use to run the
│                 # the app while you're working on it. It automatically
│                 # checks your code for syntax errors and bad style.
│
├── app.js        # The Express application is defined here.
│
├── config.js  # Contains a function that configures our application
│
├── start-app.js  # This script runs the app
│
├── test
│   ├── mocha.opts
│   └── test.js    # The tests that tell you if your code satisfies the user
│                  # stories. We use the same tests for grading
│
│
├── public             # Publically visible "assets" go in here. These are things
│   └── stylesheets    # that are "static" like CSS and images.
│       └── style.css
│
│
├── models         # Our models are stored in this directory. Here we mean  
│   └── events.js  # "models" in the MVC sense: they are the data in our application,
│                  # in our case, just an array of events.
│
│
├── views                 # Our "views" or "templates" go in here. View specify how
│   ├── about.html        # the content produced by our controllers get turned into HTML
│   ├── create-event.html
│   ├── event.html
│   ├── fragments              # Some templates are included in other templates;
│   │   └── events-list.html   # we call these "fragments".
│   ├── index.html             
│   └── layout.html
│
└── controllers   # Our controllers go in here. Controllers are the "logic"
    ├── about.js  # of our application.
    ├── events.js
    └── index.js
 
```

### Project description


Below are the user stories you must complete for the project. 
Here are the applicable [user stories](http://en.wikipedia.org/wiki/User_story)
describing how your application should work.
The stories below include implementation detials you would ordinarily not
see in a user story. These are included to help you complete the project
in manner consistent with the tests we included in `tests/test.js`. These
tests will give you real-time feedback on your progress and also allow
us to grade your project in an automated fashion.

* As any user, I can visit your site and it looks *awesome*
  * Every page uses the [Bootstrap](http://getbootstrap.com/) CSS framework
    and therefore has some palatable defaults.
    You can include bootstrap from a CDN or serve it from your application.
    * <span class="note">Grading Note:</span> the Bootstrap CSS should
      be included using a `link` element in the `head` with an `href` attribute
      that has the word "bootstrap" in it, like "bootstrap.css" or "bootstrap-min.css".
  * Every page has HTML5 `header` and `footer` elements.
  * Every page has a link to the about page and the homepage in the `footer`
    element of the page. 
      For each we expect the `footer` element to have an `a` element with
      an `href="/about"`.
  * <span class="note">Grading Note:</span> In the above stories "every page"
    will refer to the following for testing purposes: `/`, `/about`, `/events/new`, `/events/0`,
    `/events/1`, `/events/2`. If you have not yet completed a particular page,
    the page will be skipped. E.g. if you have a `/` page but no `/events/0`
    page yet and `/` has Bootstrap included, the Bootstrap test will pass.
    If one of the six pages exists and does not include Bootstrap, the test
    will not pass.
* As any user, I can visit the url at `/` and see your homepage, it has
  * Your team logo
    * <span class="note">Grading Note:</span> the logo is in an `img` tag with `id="logo"`. It should be a png image with a .png extension.
  * A an unordered list of events, including their details
    * <span class="note">Grading Note:</span> each event is in an `li`
      element with `class="event"` and `id="event-{id}"`,
      where `{id}` indicates the numerical id of the event. E.g. your
      event list may look something like the following:

      ```markup
        <ul>
          <li class="event" id="event-1">...</li>
          <li class="event" id="event-2">...</li>
        </ul>
      ```
    * Each list element displays pertinent information about the event:
      title, date, and how many people are RSVPd etc. It should include
      the default events that come with the project. E.g. in the above
      example those details should be where you see "...".
    * Every event `li` element should have an HTML5 `time` tag that has a `datetime`
      attribute equal to the time in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601).
      The text of the tag should be the datetime in natural language, including the time.
      For example, it may look like
        ```markup
          <time datetime="2014-11-12 09:30:0.0+07:00">
            Wednesday, Nov 12 at 9:30AM
          </time>
        ```
    * The title for each event is a clickable link to the "detail page"
      for that event, which should be at `/events/{{id}}`, where `id`
      refers to the id of the event, e.g. `/events/0` would take me to the
      event with id zero.
    * Events that are over are not shown
  * I can click a link to take me to `/events/new`. The link has `id="new"`
* As a user, I can visit your API at `/api/events` and retrieve an object
  with key events containing all events in
  [JSON](http://en.wikipedia.org/wiki/JSON) format. For example, the
  response may look akin to the following:
  ```javascript
    {
      events: [
        {
          id: 0,
          title: "...",
          location: "...",
          ...
        },
        {
          id: 1,
          title: "...",
          location: "...",
          ...
        },
      ]
    }
  ```
  * I can search for events by submitting a GET request to a URL like ‘/api/events?query=beach’ and only receive back events that have ‘beach’ in the event title. 
* As a user, I can visit the url at `/about` and see information about your company including:
  * your names, each in a `span` tag with `id` attribute set to your class nickname
  * a headshot of you each in an img tag with `id="{{nickname}}-headshot"`.
    This does not have to actually be a picture of you.
* As a user I can visit your page for creating new events at `/events/new`
  * It should have a `form` for creating events. The form should have attribute `method="POST"`.
  * I must specify the following attributes of an event: title, location, image, year, month, day, hour, and minute. 
    * There must be a form element with `name={{field}}` for each of these, where "{{field}}" is title, location, etc.
    * Every form element requires a `label` element with appropriate `for` attribute. For example:
      ```markup
        <form method="POST">
          <label for="title">Put title here:</label>
          <input type="text" name="title" id="title">
          ... 
        </form>
      ```
    * The year, month, day, hour, and minute form elements should be `select` elements.
    * The minute should only have 0, and 30 as selections. (At the hour and half hour).
    * The hour select should be in 24-hour time format: 0-23 are selectable.
    * The month select should have integer value attributes and refer to months by their names: January, February, etc.
    * You should only be able to schedule events in 2015 and 2016
  * When submitted, the form should be validated:
    * The image URL must begin with ‘http://’ or ‘https://’ and end with ‘.gif’ or ‘.png’.
    * The title must be less than 50 characters
    * The location must be less than 50 characters
    * The year must be 2015 or 2016
    * The hour must be 0-23
    * The minute must be 0 or 30
  * I can click a `input` element to submit the event. This element should have  `id="submit"` and `type="submit"`.
  * If the submitted form is valid, I am redirected to the detail page for that new event.
    This redirect is accomplished using a ["302" HTTP response](http://en.wikipedia.org/wiki/HTTP_302).
    (See the documentation for the [Express.js response redirect method](http://expressjs.com/api.html#res.redirect))

  * If the form was not valid, I am taken back the form and the errors are shown on the form.
    * The errors should be enumerated in a `ul` element with `class="form-errors"`
    * That `ul` element should have `li` elements for each error. For example, your errors
      may look like this
      ```markup
        <ul class="form-errors">
          <li>Error, the title must be between 0 and 50 characters</li>
        </ul>
      ```
* As an attendee, I can visit the event detail page to RSVP for an event
  * I submit my email address by filling in a `form`. The form has `method="POST"`
    and contains an `input` element with attributes type, id, and name all set to "email".
    * If I submit an email address that does not end in "@yale.edu",
      the form is redisplayed with an error message. (You should accept
      any valid "@yale.edu" ending: "@Yale.edu", "@yALe.edu", etc.).
    * The error messages displayed should be in a `ul` with `class="form-errors"`
      in the same fashion as described in the event creation errors described.
  * If I submit a valid email address, I see the event detail page again and
    it shows my email address on there along with the other attendees.

### Project workflow and deployment

Your will keep track of your work using the git version control system and deploy your application to Heroku, a cloud platform-as-a-service.

* You do not, and likely should not, complete the project in the order of the stories that you see above.
* The stories do not have a 1-to-1 correspondence with the
tasks you need to complete. For example, a single bullet point may require
a number of steps that you want to enumerate as issues on GitHub. Similarly,
sometimes a single task will satisfy a number of the tests.

### Actions and deliverables

1. Open an account on GeneralAssembly's [Dash](https://dash.generalassemb.ly)
2. 
